import actual.budget.model.BalanceType;
import actual.budget.model.ConditionOperator;
import actual.budget.model.CustomReportId;
import actual.budget.model.CustomReportMode;
import actual.budget.model.DateRangeType;
import actual.budget.model.GraphType;
import actual.budget.model.GroupBy;
import actual.budget.model.Interval;
import actual.budget.model.ReportDate;
import actual.budget.model.SelectedCategory;
import actual.budget.model.SortBy;
import kotlin.Boolean;
import kotlin.collections.List;
import kotlinx.serialization.json.JsonArray;
import kotlinx.serialization.json.JsonObject;

CREATE TABLE IF NOT EXISTS custom_reports(
  id TEXT AS CustomReportId PRIMARY KEY,
  name TEXT,
  start_date TEXT AS ReportDate,
  end_date TEXT AS ReportDate,
  date_static INTEGER AS Boolean DEFAULT 0,
  date_range TEXT AS DateRangeType,
  mode TEXT AS CustomReportMode DEFAULT 'total',
  group_by TEXT AS GroupBy DEFAULT 'Category',
  balance_type TEXT AS BalanceType DEFAULT 'Expense',
  show_empty INTEGER AS Boolean DEFAULT 0,
  show_offbudget INTEGER AS Boolean DEFAULT 0,
  show_hidden INTEGER AS Boolean DEFAULT 0,
  show_uncategorized INTEGER AS Boolean DEFAULT 0,
  selected_categories TEXT AS List<SelectedCategory>,
  graph_type TEXT AS GraphType DEFAULT 'BarGraph',
  conditions TEXT AS JsonArray,
  conditions_op TEXT AS ConditionOperator DEFAULT 'and',
  metadata TEXT AS JsonObject,
  interval TEXT AS Interval DEFAULT 'Monthly',
  color_scheme TEXT,
  tombstone INTEGER AS Boolean DEFAULT 0,
  include_current INTEGER AS Boolean DEFAULT 0,
  sort_by TEXT AS SortBy DEFAULT 'Descending'
);

insert:
  INSERT INTO custom_reports VALUES ?;

getIds:
  SELECT id FROM custom_reports;

getIdByName:
  SELECT id
    FROM custom_reports
    WHERE tombstone = 0 AND name = ?;

delete:
  DELETE
    FROM custom_reports
    WHERE id = ?;
